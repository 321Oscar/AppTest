//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.4.4.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------

using System.Runtime.Serialization;

namespace AppTest.Model
{
#pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Asap2File
    {
        [Newtonsoft.Json.JsonProperty("a2mlVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public A2mlVersion A2mlVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("asap2Version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Asap2Version Asap2Version { get; set; }

        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Project Project { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Asap2File FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Asap2File>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class A2mlVersion
    {
        [Newtonsoft.Json.JsonProperty("versionNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int VersionNo { get; set; }

        [Newtonsoft.Json.JsonProperty("upgradeNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int UpgradeNo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static A2mlVersion FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<A2mlVersion>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Asap2Version
    {
        [Newtonsoft.Json.JsonProperty("versionNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int VersionNo { get; set; }

        [Newtonsoft.Json.JsonProperty("upgradeNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int UpgradeNo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Asap2Version FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Asap2Version>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Project
    {
        [Newtonsoft.Json.JsonProperty("modules", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Modules> Modules { get; set; }

        [Newtonsoft.Json.JsonProperty("included", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Included> Included { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("longIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LongIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Header Header { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Project FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Project>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Modules
    {
        [Newtonsoft.Json.JsonProperty("a2ml", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<A2ml> A2ml { get; set; }

        [Newtonsoft.Json.JsonProperty("axisPts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AxisPts> AxisPts { get; set; }

        [Newtonsoft.Json.JsonProperty("characteristics", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Characteristics> Characteristics { get; set; }

        [Newtonsoft.Json.JsonProperty("compuMethods", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CompuMethods> CompuMethods { get; set; }

        [Newtonsoft.Json.JsonProperty("compuTabs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CompuTabs> CompuTabs { get; set; }

        [Newtonsoft.Json.JsonProperty("compuVTabs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CompuVTabs> CompuVTabs { get; set; }

        [Newtonsoft.Json.JsonProperty("compuVTabRanges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CompuVTabRanges> CompuVTabRanges { get; set; }

        [Newtonsoft.Json.JsonProperty("frame", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Frame Frame { get; set; }

        [Newtonsoft.Json.JsonProperty("functions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Functions> Functions { get; set; }

        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Groups> Groups { get; set; }

        [Newtonsoft.Json.JsonProperty("ifDatas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IfDatas> IfDatas { get; set; }

        [Newtonsoft.Json.JsonProperty("measurements", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Measurements> Measurements { get; set; }

        [Newtonsoft.Json.JsonProperty("modCommon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModCommon ModCommon { get; set; }

        [Newtonsoft.Json.JsonProperty("modPar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModPar ModPar { get; set; }

        [Newtonsoft.Json.JsonProperty("recordLayouts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RecordLayouts> RecordLayouts { get; set; }

        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Units> Units { get; set; }

        [Newtonsoft.Json.JsonProperty("userRights", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserRights> UserRights { get; set; }

        [Newtonsoft.Json.JsonProperty("variantCoding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VariantCoding VariantCoding { get; set; }

        [Newtonsoft.Json.JsonProperty("blobs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Blobs> Blobs { get; set; }

        [Newtonsoft.Json.JsonProperty("included", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Included2> Included { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("longIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LongIdentifier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Modules FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Modules>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Included
    {
        [Newtonsoft.Json.JsonProperty("modules", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Modules> Modules { get; set; }

        [Newtonsoft.Json.JsonProperty("included", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Included> Included1 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Included FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Included>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Header
    {
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("projectNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectNo { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Header FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Header>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class A2ml
    {
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static A2ml FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<A2ml>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AxisPts
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("longIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LongIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Address { get; set; }

        [Newtonsoft.Json.JsonProperty("inputQuantitiy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InputQuantitiy { get; set; }

        [Newtonsoft.Json.JsonProperty("deposit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deposit { get; set; }

        [Newtonsoft.Json.JsonProperty("maxDiff", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double MaxDiff { get; set; }

        [Newtonsoft.Json.JsonProperty("conversion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Conversion { get; set; }

        [Newtonsoft.Json.JsonProperty("maxAxisPoints", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxAxisPoints { get; set; }

        [Newtonsoft.Json.JsonProperty("lowerLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double LowerLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("upperLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double UpperLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Notes> Notes { get; set; }

        [Newtonsoft.Json.JsonProperty("byteorder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AxisPtsByteorder Byteorder { get; set; }

        [Newtonsoft.Json.JsonProperty("access", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AxisPtsAccess Access { get; set; }

        [Newtonsoft.Json.JsonProperty("axisPointDeposit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AxisPtsAxisPointDeposit AxisPointDeposit { get; set; }

        [Newtonsoft.Json.JsonProperty("displayIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("ecuAddressExtension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EcuAddressExtension { get; set; }

        [Newtonsoft.Json.JsonProperty("extendedLimits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExtendedLimits ExtendedLimits { get; set; }

        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

        [Newtonsoft.Json.JsonProperty("functions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Functions { get; set; }

        [Newtonsoft.Json.JsonProperty("guardRails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool GuardRails { get; set; }

        [Newtonsoft.Json.JsonProperty("ifData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IfDatas> IfData { get; set; }

        [Newtonsoft.Json.JsonProperty("monotony", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AxisPtsMonotony Monotony { get; set; }

        [Newtonsoft.Json.JsonProperty("physUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhysUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("readOnly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ReadOnly { get; set; }

        [Newtonsoft.Json.JsonProperty("memorySegment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MemorySegment { get; set; }

        [Newtonsoft.Json.JsonProperty("stepSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double StepSize { get; set; }

        [Newtonsoft.Json.JsonProperty("symbolLink", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SymbolLink SymbolLink { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static AxisPts FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AxisPts>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Characteristics : XCPSignal
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get => name; set => name = value; }

        [Newtonsoft.Json.JsonProperty("longIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LongIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CharacteristicsType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Address { get; set; }

        [Newtonsoft.Json.JsonProperty("deposit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deposit { get; set; }

        [Newtonsoft.Json.JsonProperty("maxDiff", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double MaxDiff { get; set; }

        [Newtonsoft.Json.JsonProperty("conversion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Conversion { get; set; }

        [Newtonsoft.Json.JsonProperty("lowerLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double LowerLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("upperLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double UpperLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Notes> Notes { get; set; }

        [Newtonsoft.Json.JsonProperty("axisDescriptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AxisDescriptions> AxisDescriptions { get; set; }

        [Newtonsoft.Json.JsonProperty("bitmask", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Bitmask { get; set; }

        [Newtonsoft.Json.JsonProperty("byteorder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CharacteristicsByteorder Byteorder { get; set; }

        [Newtonsoft.Json.JsonProperty("access", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CharacteristicsAccess Access { get; set; }

        [Newtonsoft.Json.JsonProperty("comparisonQuantityMeasurment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ComparisonQuantityMeasurment { get; set; }

        [Newtonsoft.Json.JsonProperty("dependetCharacteristic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DependetCharacteristic DependetCharacteristic { get; set; }

        [Newtonsoft.Json.JsonProperty("discrete", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Discrete { get; set; }

        [Newtonsoft.Json.JsonProperty("displayIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("ecuAddressExtension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EcuAddressExtension { get; set; }

        [Newtonsoft.Json.JsonProperty("extendedLimits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExtendedLimits ExtendedLimits { get; set; }

        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

        [Newtonsoft.Json.JsonProperty("functions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Functions { get; set; }

        [Newtonsoft.Json.JsonProperty("guardRails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool GuardRails { get; set; }

        [Newtonsoft.Json.JsonProperty("ifData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IfDatas> IfData { get; set; }

        [Newtonsoft.Json.JsonProperty("mapList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> MapList { get; set; }

        [Newtonsoft.Json.JsonProperty("matrixDim", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MatrixDim MatrixDim { get; set; }

        [Newtonsoft.Json.JsonProperty("maxRefresh", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MaxRefresh MaxRefresh { get; set; }

        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Number { get; set; }

        [Newtonsoft.Json.JsonProperty("physUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhysUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("readOnly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ReadOnly { get; set; }

        [Newtonsoft.Json.JsonProperty("memorySegment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MemorySegment { get; set; }

        [Newtonsoft.Json.JsonProperty("stepSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double StepSize { get; set; }

        [Newtonsoft.Json.JsonProperty("symbolLink", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SymbolLink SymbolLink { get; set; }

        [Newtonsoft.Json.JsonProperty("virtualCharacteristic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VirtualCharacteristic VirtualCharacteristic { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Characteristics FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Characteristics>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CompuMethods
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("longIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LongIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("conversionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CompuMethodsConversionType ConversionType { get; set; }

        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit { get; set; }

        [Newtonsoft.Json.JsonProperty("coeffs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Coeffs Coeffs { get; set; }

        [Newtonsoft.Json.JsonProperty("coeffsLinear", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CoeffsLinear CoeffsLinear { get; set; }

        [Newtonsoft.Json.JsonProperty("compuTab_ref", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompuTab_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("formula", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Formula Formula { get; set; }

        [Newtonsoft.Json.JsonProperty("unit_ref", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("conversionTable_ref", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConversionTable_ref { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static CompuMethods FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CompuMethods>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CompuTabs
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("longIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LongIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("conversionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CompuTabsConversionType ConversionType { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfValuePairs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NumberOfValuePairs { get; set; }

        [Newtonsoft.Json.JsonProperty("valuePairs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ValuePairs> ValuePairs { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultValueNumeric", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double DefaultValueNumeric { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static CompuTabs FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CompuTabs>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CompuVTabs
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("longIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LongIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("conversionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CompuVTabsConversionType ConversionType { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfValuePairs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NumberOfValuePairs { get; set; }

        [Newtonsoft.Json.JsonProperty("valuePairs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ValuePairs2> ValuePairs { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultValue { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static CompuVTabs FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CompuVTabs>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CompuVTabRanges
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("longIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LongIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfValueTriples", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NumberOfValueTriples { get; set; }

        [Newtonsoft.Json.JsonProperty("valueTriples", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ValueTriples> ValueTriples { get; set; }

        [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultValue { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static CompuVTabRanges FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CompuVTabRanges>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Frame
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("longIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LongIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("scalingUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ScalingUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rate { get; set; }

        [Newtonsoft.Json.JsonProperty("frameMeasurements", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FrameMeasurements { get; set; }

        [Newtonsoft.Json.JsonProperty("ifDatas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IfDatas> IfDatas { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Frame FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Frame>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Functions
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("longIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LongIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("annotations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Notes> Annotations { get; set; }

        [Newtonsoft.Json.JsonProperty("defCharacteristics", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DefCharacteristics { get; set; }

        [Newtonsoft.Json.JsonProperty("functionVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FunctionVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("ifDatas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IfDatas> IfDatas { get; set; }

        [Newtonsoft.Json.JsonProperty("inMeasurments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> InMeasurments { get; set; }

        [Newtonsoft.Json.JsonProperty("locMeasurments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> LocMeasurments { get; set; }

        [Newtonsoft.Json.JsonProperty("outMeasurments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OutMeasurments { get; set; }

        [Newtonsoft.Json.JsonProperty("refCharacteristics", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RefCharacteristics { get; set; }

        [Newtonsoft.Json.JsonProperty("subFunctions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SubFunctions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Functions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Functions>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Groups
    {
        [Newtonsoft.Json.JsonProperty("groupName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupName { get; set; }

        [Newtonsoft.Json.JsonProperty("longIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LongIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("annotations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Notes> Annotations { get; set; }

        [Newtonsoft.Json.JsonProperty("functionList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FunctionList { get; set; }

        [Newtonsoft.Json.JsonProperty("ifDatas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IfDatas> IfDatas { get; set; }

        [Newtonsoft.Json.JsonProperty("refCharacteristics", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RefCharacteristics { get; set; }

        [Newtonsoft.Json.JsonProperty("refMeasurements", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RefMeasurements { get; set; }

        [Newtonsoft.Json.JsonProperty("root", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Root { get; set; }

        [Newtonsoft.Json.JsonProperty("subGroups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SubGroups { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Groups FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Groups>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class IfDatas
    {
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static IfDatas FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IfDatas>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Measurements : XCPSignal
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get => name; set => name = value; }

        [Newtonsoft.Json.JsonProperty("longIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LongIdentifier { get => Comment; set => Comment = value; }

        [Newtonsoft.Json.JsonProperty("datatype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MeasurementsDatatype Datatype { get; set; }

        [Newtonsoft.Json.JsonProperty("conversion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Conversion { get; set; }

        [Newtonsoft.Json.JsonProperty("resolution", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Resolution { get; set; }

        [Newtonsoft.Json.JsonProperty("accuracy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Accuracy { get; set; }

        [Newtonsoft.Json.JsonProperty("lowerLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double LowerLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("upperLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double UpperLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("annotations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Notes> Annotations { get; set; }

        [Newtonsoft.Json.JsonProperty("arraySize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ArraySize { get; set; }

        [Newtonsoft.Json.JsonProperty("bitMask", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BitMask { get; set; }

        [Newtonsoft.Json.JsonProperty("bitOperation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BitOperation BitOperation { get; set; }

        [Newtonsoft.Json.JsonProperty("byteorder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MeasurementsByteorder Byteorder { get; set; }

        [Newtonsoft.Json.JsonProperty("discrete", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Discrete { get; set; }

        [Newtonsoft.Json.JsonProperty("displayIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("ecuAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EcuAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("ecuAddressExtension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EcuAddressExtension { get; set; }

        [Newtonsoft.Json.JsonProperty("errorMask", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ErrorMask { get; set; }

        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

        [Newtonsoft.Json.JsonProperty("functionList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FunctionList { get; set; }

        [Newtonsoft.Json.JsonProperty("ifDatas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IfDatas> IfDatas { get; set; }

        [Newtonsoft.Json.JsonProperty("layout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MeasurementsLayout Layout { get; set; }

        [Newtonsoft.Json.JsonProperty("matrixDim", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MatrixDim MatrixDim { get; set; }

        [Newtonsoft.Json.JsonProperty("maxRefresh", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MaxRefresh MaxRefresh { get; set; }

        [Newtonsoft.Json.JsonProperty("physUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhysUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("readWrite", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ReadWrite { get; set; }

        [Newtonsoft.Json.JsonProperty("memorySegment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MemorySegment { get; set; }

        [Newtonsoft.Json.JsonProperty("symbolLink", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SymbolLink SymbolLink { get; set; }

        [Newtonsoft.Json.JsonProperty("virtual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Virtual { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Measurements FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Measurements>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ModCommon
    {
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("alignmentByte", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AlignmentByte { get; set; }

        [Newtonsoft.Json.JsonProperty("alignmentFloat32IEEE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AlignmentFloat32IEEE { get; set; }

        [Newtonsoft.Json.JsonProperty("alignmentFloat64IEEE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AlignmentFloat64IEEE { get; set; }

        [Newtonsoft.Json.JsonProperty("alignmentInt64", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AlignmentInt64 { get; set; }

        [Newtonsoft.Json.JsonProperty("alignmentLong", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AlignmentLong { get; set; }

        [Newtonsoft.Json.JsonProperty("alignmentWord", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AlignmentWord { get; set; }

        [Newtonsoft.Json.JsonProperty("byteorder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ModCommonByteorder Byteorder { get; set; }

        [Newtonsoft.Json.JsonProperty("dataSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DataSize { get; set; }

        [Newtonsoft.Json.JsonProperty("deposit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ModCommonDeposit Deposit { get; set; }

        [Newtonsoft.Json.JsonProperty("standardRecordLayout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StandardRecordLayout { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static ModCommon FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ModCommon>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ModPar
    {
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("addresses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Addresses { get; set; }

        [Newtonsoft.Json.JsonProperty("calibrationMethods", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CalibrationMethods> CalibrationMethods { get; set; }

        [Newtonsoft.Json.JsonProperty("cpuType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CpuType { get; set; }

        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Customer { get; set; }

        [Newtonsoft.Json.JsonProperty("customerNo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerNo { get; set; }

        [Newtonsoft.Json.JsonProperty("ecu", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ecu { get; set; }

        [Newtonsoft.Json.JsonProperty("ecuCalibrationOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EcuCalibrationOffset { get; set; }

        [Newtonsoft.Json.JsonProperty("epk", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Epk { get; set; }

        [Newtonsoft.Json.JsonProperty("memoryLayouts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MemoryLayouts> MemoryLayouts { get; set; }

        [Newtonsoft.Json.JsonProperty("memorySegments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MemorySegments> MemorySegments { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfInterfaces", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NumberOfInterfaces { get; set; }

        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("supplier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Supplier { get; set; }

        [Newtonsoft.Json.JsonProperty("systemConstants", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SystemConstants> SystemConstants { get; set; }

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static ModPar FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ModPar>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RecordLayouts
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("alignmentByte", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AlignmentByte { get; set; }

        [Newtonsoft.Json.JsonProperty("alignmentFloat32IEEE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AlignmentFloat32IEEE { get; set; }

        [Newtonsoft.Json.JsonProperty("alignmentFloat64IEEE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AlignmentFloat64IEEE { get; set; }

        [Newtonsoft.Json.JsonProperty("alignmentInt64", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AlignmentInt64 { get; set; }

        [Newtonsoft.Json.JsonProperty("alignmentLong", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AlignmentLong { get; set; }

        [Newtonsoft.Json.JsonProperty("alignmentWord", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AlignmentWord { get; set; }

        [Newtonsoft.Json.JsonProperty("axisPtsX", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AxisPtsX AxisPtsX { get; set; }

        [Newtonsoft.Json.JsonProperty("axisPtsY", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AxisPtsX AxisPtsY { get; set; }

        [Newtonsoft.Json.JsonProperty("axisPtsZ", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AxisPtsX AxisPtsZ { get; set; }

        [Newtonsoft.Json.JsonProperty("axisPts4", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AxisPtsX AxisPts4 { get; set; }

        [Newtonsoft.Json.JsonProperty("axisPts5", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AxisPtsX AxisPts5 { get; set; }

        [Newtonsoft.Json.JsonProperty("axisRescaleX", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AxisRescaleX AxisRescaleX { get; set; }

        [Newtonsoft.Json.JsonProperty("axisRescaleY", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AxisRescaleX AxisRescaleY { get; set; }

        [Newtonsoft.Json.JsonProperty("axisRescaleZ", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AxisRescaleX AxisRescaleZ { get; set; }

        [Newtonsoft.Json.JsonProperty("axisRescale4", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AxisRescaleX AxisRescale4 { get; set; }

        [Newtonsoft.Json.JsonProperty("axisRescale5", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AxisRescaleX AxisRescale5 { get; set; }

        [Newtonsoft.Json.JsonProperty("distOpX", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DistOpX DistOpX { get; set; }

        [Newtonsoft.Json.JsonProperty("distOpY", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DistOpX DistOpY { get; set; }

        [Newtonsoft.Json.JsonProperty("distOpZ", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DistOpX DistOpZ { get; set; }

        [Newtonsoft.Json.JsonProperty("distOp4", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DistOpX DistOp4 { get; set; }

        [Newtonsoft.Json.JsonProperty("distOp5", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DistOpX DistOp5 { get; set; }

        [Newtonsoft.Json.JsonProperty("fixNoAxisPtsX", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FixNoAxisPtsX FixNoAxisPtsX { get; set; }

        [Newtonsoft.Json.JsonProperty("fixNoAxisPtsY", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FixNoAxisPtsX FixNoAxisPtsY { get; set; }

        [Newtonsoft.Json.JsonProperty("fixNoAxisPtsZ", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FixNoAxisPtsX FixNoAxisPtsZ { get; set; }

        [Newtonsoft.Json.JsonProperty("fixNoAxisPts4", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FixNoAxisPtsX FixNoAxisPts4 { get; set; }

        [Newtonsoft.Json.JsonProperty("fixNoAxisPts5", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FixNoAxisPtsX FixNoAxisPts5 { get; set; }

        [Newtonsoft.Json.JsonProperty("functionValues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FunctionValues FunctionValues { get; set; }

        [Newtonsoft.Json.JsonProperty("identification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identification Identification { get; set; }

        [Newtonsoft.Json.JsonProperty("noAxisPtsX", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NoAxisPtsX NoAxisPtsX { get; set; }

        [Newtonsoft.Json.JsonProperty("noAxisPtsY", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NoAxisPtsX NoAxisPtsY { get; set; }

        [Newtonsoft.Json.JsonProperty("noAxisPtsZ", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NoAxisPtsX NoAxisPtsZ { get; set; }

        [Newtonsoft.Json.JsonProperty("noAxisPts4", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NoAxisPtsX NoAxisPts4 { get; set; }

        [Newtonsoft.Json.JsonProperty("noAxisPts5", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NoAxisPtsX NoAxisPts5 { get; set; }

        [Newtonsoft.Json.JsonProperty("noRescaleX", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NoRescaleX NoRescaleX { get; set; }

        [Newtonsoft.Json.JsonProperty("noRescaleY", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NoRescaleX NoRescaleY { get; set; }

        [Newtonsoft.Json.JsonProperty("noRescaleZ", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NoRescaleX NoRescaleZ { get; set; }

        [Newtonsoft.Json.JsonProperty("noRescale4", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NoRescaleX NoRescale4 { get; set; }

        [Newtonsoft.Json.JsonProperty("noRescale5", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NoRescaleX NoRescale5 { get; set; }

        [Newtonsoft.Json.JsonProperty("offsetX", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OffsetX OffsetX { get; set; }

        [Newtonsoft.Json.JsonProperty("offsetY", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OffsetX OffsetY { get; set; }

        [Newtonsoft.Json.JsonProperty("offsetZ", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OffsetX OffsetZ { get; set; }

        [Newtonsoft.Json.JsonProperty("offset4", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OffsetX Offset4 { get; set; }

        [Newtonsoft.Json.JsonProperty("offset5", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OffsetX Offset5 { get; set; }

        [Newtonsoft.Json.JsonProperty("reserved", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Reserved> Reserved { get; set; }

        [Newtonsoft.Json.JsonProperty("ripAddressW", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RipAddressW RipAddressW { get; set; }

        [Newtonsoft.Json.JsonProperty("ripAddressX", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RipAddressW RipAddressX { get; set; }

        [Newtonsoft.Json.JsonProperty("ripAddressY", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RipAddressW RipAddressY { get; set; }

        [Newtonsoft.Json.JsonProperty("ripAddressZ", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RipAddressW RipAddressZ { get; set; }

        [Newtonsoft.Json.JsonProperty("ripAddress4", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RipAddressW RipAddress4 { get; set; }

        [Newtonsoft.Json.JsonProperty("ripAddress5", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RipAddressW RipAddress5 { get; set; }

        [Newtonsoft.Json.JsonProperty("srcAddressX", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SrcAddressX SrcAddressX { get; set; }

        [Newtonsoft.Json.JsonProperty("srcAddressY", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SrcAddressX SrcAddressY { get; set; }

        [Newtonsoft.Json.JsonProperty("srcAddressZ", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SrcAddressX SrcAddressZ { get; set; }

        [Newtonsoft.Json.JsonProperty("srcAddress4", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SrcAddressX SrcAddress4 { get; set; }

        [Newtonsoft.Json.JsonProperty("srcAddress5", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SrcAddressX SrcAddress5 { get; set; }

        [Newtonsoft.Json.JsonProperty("shiftOpX", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShiftOpX ShiftOpX { get; set; }

        [Newtonsoft.Json.JsonProperty("shiftOpY", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShiftOpX ShiftOpY { get; set; }

        [Newtonsoft.Json.JsonProperty("shiftOpZ", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShiftOpX ShiftOpZ { get; set; }

        [Newtonsoft.Json.JsonProperty("shiftOp4", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShiftOpX ShiftOp4 { get; set; }

        [Newtonsoft.Json.JsonProperty("shiftOp5", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShiftOpX ShiftOp5 { get; set; }

        [Newtonsoft.Json.JsonProperty("staticRecordLayout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool StaticRecordLayout { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static RecordLayouts FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RecordLayouts>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Units
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("longIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LongIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("display", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Display { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UnitsType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("unit_ref", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unit_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("siExponents", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SiExponents SiExponents { get; set; }

        [Newtonsoft.Json.JsonProperty("unitConversion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnitConversion UnitConversion { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Units FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Units>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserRights
    {
        [Newtonsoft.Json.JsonProperty("userLevelId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserLevelId { get; set; }

        [Newtonsoft.Json.JsonProperty("readOnly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ReadOnly { get; set; }

        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<string>> Groups { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static UserRights FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRights>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class VariantCoding
    {
        [Newtonsoft.Json.JsonProperty("varCharacteristics", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VarCharacteristics> VarCharacteristics { get; set; }

        [Newtonsoft.Json.JsonProperty("varCriterion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VarCriterion> VarCriterion { get; set; }

        [Newtonsoft.Json.JsonProperty("varForbiddenComb", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VarForbiddenComb> VarForbiddenComb { get; set; }

        [Newtonsoft.Json.JsonProperty("varNaming", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VariantCodingVarNaming VarNaming { get; set; }

        [Newtonsoft.Json.JsonProperty("varSeparator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VarSeparator { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static VariantCoding FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VariantCoding>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Blobs
    {
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Blobs FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Blobs>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Included2
    {
        [Newtonsoft.Json.JsonProperty("a2ml", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<A2ml> A2ml { get; set; }

        [Newtonsoft.Json.JsonProperty("axisPts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AxisPts> AxisPts { get; set; }

        [Newtonsoft.Json.JsonProperty("characteristics", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Characteristics> Characteristics { get; set; }

        [Newtonsoft.Json.JsonProperty("compuMethods", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CompuMethods> CompuMethods { get; set; }

        [Newtonsoft.Json.JsonProperty("compuTabs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CompuTabs> CompuTabs { get; set; }

        [Newtonsoft.Json.JsonProperty("compuVTabs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CompuVTabs> CompuVTabs { get; set; }

        [Newtonsoft.Json.JsonProperty("compuVTabRanges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CompuVTabRanges> CompuVTabRanges { get; set; }

        [Newtonsoft.Json.JsonProperty("frame", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Frame Frame { get; set; }

        [Newtonsoft.Json.JsonProperty("functions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Functions> Functions { get; set; }

        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Groups> Groups { get; set; }

        [Newtonsoft.Json.JsonProperty("ifDatas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IfDatas> IfDatas { get; set; }

        [Newtonsoft.Json.JsonProperty("measurements", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Measurements> Measurements { get; set; }

        [Newtonsoft.Json.JsonProperty("modCommon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModCommon ModCommon { get; set; }

        [Newtonsoft.Json.JsonProperty("modPar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModPar ModPar { get; set; }

        [Newtonsoft.Json.JsonProperty("recordLayouts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RecordLayouts> RecordLayouts { get; set; }

        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Units> Units { get; set; }

        [Newtonsoft.Json.JsonProperty("userRights", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserRights> UserRights { get; set; }

        [Newtonsoft.Json.JsonProperty("variantCoding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VariantCoding VariantCoding { get; set; }

        [Newtonsoft.Json.JsonProperty("blobs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Blobs> Blobs { get; set; }

        [Newtonsoft.Json.JsonProperty("included", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Included2> Included { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Included2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Included2>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Notes
    {
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Origin { get; set; }

        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Text { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Notes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Notes>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AxisPtsByteorder
    {
        [EnumMember(Value = @"LITTLE_ENDIAN")]
        LITTLE_ENDIAN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BIG_ENDIAN")]
        BIG_ENDIAN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MSB_LAST")]
        MSB_LAST = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MSB_FIRST")]
        MSB_FIRST = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AxisPtsAccess
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CALIBRATION")]
        CALIBRATION = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NO_CALIBRATION")]
        NO_CALIBRATION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_IN_MCD_SYSTEM")]
        NOT_IN_MCD_SYSTEM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OFFLINE_CALIBRATION")]
        OFFLINE_CALIBRATION = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AxisPtsAxisPointDeposit
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ABSOLUTE")]
        ABSOLUTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DIFFERENCE")]
        DIFFERENCE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ExtendedLimits
    {
        [Newtonsoft.Json.JsonProperty("lowerLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double LowerLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("upperLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double UpperLimit { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static ExtendedLimits FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExtendedLimits>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AxisPtsMonotony
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MON_DECREASE")]
        MON_DECREASE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MON_INCREASE")]
        MON_INCREASE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"STRICT_DECREASE")]
        STRICT_DECREASE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"STRICT_INCREASE")]
        STRICT_INCREASE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MONOTONOUS")]
        MONOTONOUS = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"STRICT_MON")]
        STRICT_MON = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_MON")]
        NOT_MON = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SymbolLink
    {
        [Newtonsoft.Json.JsonProperty("symbolName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SymbolName { get; set; }

        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Offset { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static SymbolLink FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SymbolLink>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CharacteristicsType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ASCII")]
        ASCII = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CURVE")]
        CURVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MAP")]
        MAP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CUBOID")]
        CUBOID = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CUBE_4")]
        CUBE_4 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CUBE_5")]
        CUBE_5 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"VAL_BLK")]
        VAL_BLK = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"VALUE")]
        VALUE = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AxisDescriptions
    {
        [Newtonsoft.Json.JsonProperty("attribute", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AxisDescriptionsAttribute Attribute { get; set; }

        [Newtonsoft.Json.JsonProperty("inputQuantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InputQuantity { get; set; }

        [Newtonsoft.Json.JsonProperty("conversion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Conversion { get; set; }

        [Newtonsoft.Json.JsonProperty("maxAxisPoints", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxAxisPoints { get; set; }

        [Newtonsoft.Json.JsonProperty("lowerLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double LowerLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("upperLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double UpperLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("annotations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Notes> Annotations { get; set; }

        [Newtonsoft.Json.JsonProperty("axisPoints_ref", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AxisPoints_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("byteorder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AxisDescriptionsByteorder Byteorder { get; set; }

        [Newtonsoft.Json.JsonProperty("curveAxis_ref", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurveAxis_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("deposit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AxisDescriptionsDeposit Deposit { get; set; }

        [Newtonsoft.Json.JsonProperty("extendedLimits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExtendedLimits ExtendedLimits { get; set; }

        [Newtonsoft.Json.JsonProperty("fixAxisPar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FixAxisPar FixAxisPar { get; set; }

        [Newtonsoft.Json.JsonProperty("fixAxisParDist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FixAxisParDist FixAxisParDist { get; set; }

        [Newtonsoft.Json.JsonProperty("fixAxisParList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FixAxisParList FixAxisParList { get; set; }

        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

        [Newtonsoft.Json.JsonProperty("maxGrad", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double MaxGrad { get; set; }

        [Newtonsoft.Json.JsonProperty("monotony", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AxisDescriptionsMonotony Monotony { get; set; }

        [Newtonsoft.Json.JsonProperty("physUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhysUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("readOnly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ReadOnly { get; set; }

        [Newtonsoft.Json.JsonProperty("stepSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double StepSize { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static AxisDescriptions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AxisDescriptions>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CharacteristicsByteorder
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LITTLE_ENDIAN")]
        LITTLE_ENDIAN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BIG_ENDIAN")]
        BIG_ENDIAN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MSB_LAST")]
        MSB_LAST = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MSB_FIRST")]
        MSB_FIRST = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CharacteristicsAccess
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CALIBRATION")]
        CALIBRATION = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NO_CALIBRATION")]
        NO_CALIBRATION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_IN_MCD_SYSTEM")]
        NOT_IN_MCD_SYSTEM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OFFLINE_CALIBRATION")]
        OFFLINE_CALIBRATION = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DependetCharacteristic
    {
        [Newtonsoft.Json.JsonProperty("formula", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Formula { get; set; }

        [Newtonsoft.Json.JsonProperty("characterstics", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Characterstics { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static DependetCharacteristic FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DependetCharacteristic>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MatrixDim
    {
        [Newtonsoft.Json.JsonProperty("xDim", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int XDim { get; set; }

        [Newtonsoft.Json.JsonProperty("yDim", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int YDim { get; set; }

        [Newtonsoft.Json.JsonProperty("zDim", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ZDim { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static MatrixDim FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MatrixDim>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MaxRefresh
    {
        [Newtonsoft.Json.JsonProperty("scalingUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ScalingUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static MaxRefresh FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MaxRefresh>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class VirtualCharacteristic
    {
        [Newtonsoft.Json.JsonProperty("formula", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Formula { get; set; }

        [Newtonsoft.Json.JsonProperty("characterstics", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Characterstics { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static VirtualCharacteristic FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VirtualCharacteristic>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CompuMethodsConversionType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTICAL")]
        IDENTICAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FORM")]
        FORM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LINEAR")]
        LINEAR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RAT_FUNC")]
        RAT_FUNC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TAB_INTP")]
        TAB_INTP = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TAB_NOINTP")]
        TAB_NOINTP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TAB_VERB")]
        TAB_VERB = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Coeffs
    {
        [Newtonsoft.Json.JsonProperty("a", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double A { get; set; }

        [Newtonsoft.Json.JsonProperty("b", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double B { get; set; }

        [Newtonsoft.Json.JsonProperty("c", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double C { get; set; }

        [Newtonsoft.Json.JsonProperty("d", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double D { get; set; }

        [Newtonsoft.Json.JsonProperty("e", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double E { get; set; }

        [Newtonsoft.Json.JsonProperty("f", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double F { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Coeffs FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Coeffs>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CoeffsLinear
    {
        [Newtonsoft.Json.JsonProperty("a", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double A { get; set; }

        [Newtonsoft.Json.JsonProperty("b", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double B { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static CoeffsLinear FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CoeffsLinear>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Formula
    {
        [Newtonsoft.Json.JsonProperty("fx", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fx { get; set; }

        [Newtonsoft.Json.JsonProperty("gx", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gx { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Formula FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Formula>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CompuTabsConversionType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTICAL")]
        IDENTICAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FORM")]
        FORM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LINEAR")]
        LINEAR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RAT_FUNC")]
        RAT_FUNC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TAB_INTP")]
        TAB_INTP = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TAB_NOINTP")]
        TAB_NOINTP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TAB_VERB")]
        TAB_VERB = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ValuePairs
    {
        [Newtonsoft.Json.JsonProperty("inVal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double InVal { get; set; }

        [Newtonsoft.Json.JsonProperty("outVal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double OutVal { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static ValuePairs FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ValuePairs>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CompuVTabsConversionType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IDENTICAL")]
        IDENTICAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FORM")]
        FORM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LINEAR")]
        LINEAR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RAT_FUNC")]
        RAT_FUNC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TAB_INTP")]
        TAB_INTP = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TAB_NOINTP")]
        TAB_NOINTP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TAB_VERB")]
        TAB_VERB = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ValuePairs2
    {
        [Newtonsoft.Json.JsonProperty("inVal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double InVal { get; set; }

        [Newtonsoft.Json.JsonProperty("outVal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutVal { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static ValuePairs2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ValuePairs2>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ValueTriples
    {
        [Newtonsoft.Json.JsonProperty("inValMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double InValMin { get; set; }

        [Newtonsoft.Json.JsonProperty("inValMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double InValMax { get; set; }

        [Newtonsoft.Json.JsonProperty("outVal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutVal { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static ValueTriples FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ValueTriples>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MeasurementsDatatype
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UBYTE")]
        UBYTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SBYTE")]
        SBYTE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UWORD")]
        UWORD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SWORD")]
        SWORD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ULONG")]
        ULONG = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SLONG")]
        SLONG = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"A_UINT64")]
        A_UINT64 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"A_INT64")]
        A_INT64 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT32_IEEE")]
        FLOAT32_IEEE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT64_IEEE")]
        FLOAT64_IEEE = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BitOperation
    {
        [Newtonsoft.Json.JsonProperty("leftShift", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int LeftShift { get; set; }

        [Newtonsoft.Json.JsonProperty("rightShift", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RightShift { get; set; }

        [Newtonsoft.Json.JsonProperty("signExtend", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SignExtend { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static BitOperation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BitOperation>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MeasurementsByteorder
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LITTLE_ENDIAN")]
        LITTLE_ENDIAN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BIG_ENDIAN")]
        BIG_ENDIAN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MSB_LAST")]
        MSB_LAST = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MSB_FIRST")]
        MSB_FIRST = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MeasurementsLayout
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ROW_DIR")]
        ROW_DIR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COLUMN_DIR")]
        COLUMN_DIR = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ModCommonByteorder
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LITTLE_ENDIAN")]
        LITTLE_ENDIAN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BIG_ENDIAN")]
        BIG_ENDIAN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MSB_LAST")]
        MSB_LAST = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MSB_FIRST")]
        MSB_FIRST = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ModCommonDeposit
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ABSOLUTE")]
        ABSOLUTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DIFFERENCE")]
        DIFFERENCE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CalibrationMethods
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Version { get; set; }

        [Newtonsoft.Json.JsonProperty("calibrationHandle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CalibrationHandle> CalibrationHandle { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static CalibrationMethods FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CalibrationMethods>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MemoryLayouts
    {
        [Newtonsoft.Json.JsonProperty("prgType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MemoryLayoutsPrgType PrgType { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Address { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Size { get; set; }

        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double> Offset { get; set; }

        [Newtonsoft.Json.JsonProperty("ifDatas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IfDatas> IfDatas { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static MemoryLayouts FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MemoryLayouts>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MemorySegments
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("longIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LongIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("prgType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MemorySegmentsPrgType PrgType { get; set; }

        [Newtonsoft.Json.JsonProperty("memoryType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MemorySegmentsMemoryType MemoryType { get; set; }

        [Newtonsoft.Json.JsonProperty("attribute", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MemorySegmentsAttribute Attribute { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Address { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Size { get; set; }

        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double> Offset { get; set; }

        [Newtonsoft.Json.JsonProperty("ifDatas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IfDatas> IfDatas { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static MemorySegments FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MemorySegments>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SystemConstants
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static SystemConstants FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SystemConstants>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AxisPtsX
    {
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Position { get; set; }

        [Newtonsoft.Json.JsonProperty("datatype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AxisPtsXDatatype Datatype { get; set; }

        [Newtonsoft.Json.JsonProperty("indexorder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AxisPtsXIndexorder Indexorder { get; set; }

        [Newtonsoft.Json.JsonProperty("addressing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AxisPtsXAddressing Addressing { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static AxisPtsX FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AxisPtsX>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AxisRescaleX
    {
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Position { get; set; }

        [Newtonsoft.Json.JsonProperty("datatype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AxisRescaleXDatatype Datatype { get; set; }

        [Newtonsoft.Json.JsonProperty("maxNumberOfRescalePairs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxNumberOfRescalePairs { get; set; }

        [Newtonsoft.Json.JsonProperty("indexorder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AxisRescaleXIndexorder Indexorder { get; set; }

        [Newtonsoft.Json.JsonProperty("addressing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AxisRescaleXAddressing Addressing { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static AxisRescaleX FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AxisRescaleX>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DistOpX
    {
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Position { get; set; }

        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DistOpXDataType DataType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static DistOpX FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DistOpX>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FixNoAxisPtsX
    {
        [Newtonsoft.Json.JsonProperty("numberOfAxisPoints", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NumberOfAxisPoints { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static FixNoAxisPtsX FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FixNoAxisPtsX>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FunctionValues
    {
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Position { get; set; }

        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FunctionValuesDataType DataType { get; set; }

        [Newtonsoft.Json.JsonProperty("indexMode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FunctionValuesIndexMode IndexMode { get; set; }

        [Newtonsoft.Json.JsonProperty("addressType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FunctionValuesAddressType AddressType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static FunctionValues FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FunctionValues>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Identification
    {
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Position { get; set; }

        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IdentificationDataType DataType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Identification FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Identification>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NoAxisPtsX
    {
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Position { get; set; }

        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NoAxisPtsXDataType DataType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static NoAxisPtsX FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NoAxisPtsX>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NoRescaleX
    {
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Position { get; set; }

        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NoRescaleXDataType DataType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static NoRescaleX FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NoRescaleX>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OffsetX
    {
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Position { get; set; }

        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OffsetXDataType DataType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static OffsetX FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OffsetX>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Reserved
    {
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Position { get; set; }

        [Newtonsoft.Json.JsonProperty("dataSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReservedDataSize DataSize { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Reserved FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Reserved>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RipAddressW
    {
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Position { get; set; }

        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RipAddressWDataType DataType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static RipAddressW FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RipAddressW>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SrcAddressX
    {
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Position { get; set; }

        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SrcAddressXDataType DataType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static SrcAddressX FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SrcAddressX>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ShiftOpX
    {
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Position { get; set; }

        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShiftOpXDataType DataType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static ShiftOpX FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShiftOpX>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum UnitsType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"DERIVED")]
        DERIVED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EXTENDED_SI")]
        EXTENDED_SI = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SiExponents
    {
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Length { get; set; }

        [Newtonsoft.Json.JsonProperty("mass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Mass { get; set; }

        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Time { get; set; }

        [Newtonsoft.Json.JsonProperty("electricCurrent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ElectricCurrent { get; set; }

        [Newtonsoft.Json.JsonProperty("temperature", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Temperature { get; set; }

        [Newtonsoft.Json.JsonProperty("amountOfSubstance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AmountOfSubstance { get; set; }

        [Newtonsoft.Json.JsonProperty("luminousIntensity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int LuminousIntensity { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static SiExponents FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SiExponents>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UnitConversion
    {
        [Newtonsoft.Json.JsonProperty("gradient", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Gradient { get; set; }

        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Offset { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static UnitConversion FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnitConversion>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class VarCharacteristics
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("criterions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Criterions { get; set; }

        [Newtonsoft.Json.JsonProperty("addresses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Addresses { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static VarCharacteristics FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VarCharacteristics>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class VarCriterion
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("longIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LongIdentifier { get; set; }

        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Values { get; set; }

        [Newtonsoft.Json.JsonProperty("measurement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Measurement { get; set; }

        [Newtonsoft.Json.JsonProperty("selectionCharacteristic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SelectionCharacteristic { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static VarCriterion FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VarCriterion>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class VarForbiddenComb
    {
        [Newtonsoft.Json.JsonProperty("tuples", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Tuples> Tuples { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static VarForbiddenComb FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VarForbiddenComb>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum VariantCodingVarNaming
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NUMERIC")]
        NUMERIC = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AxisDescriptionsAttribute
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CURVE_AXIS")]
        CURVE_AXIS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COM_AXIS")]
        COM_AXIS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FIX_AXIS")]
        FIX_AXIS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RES_AXIS")]
        RES_AXIS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"STD_AXIS")]
        STD_AXIS = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AxisDescriptionsByteorder
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LITTLE_ENDIAN")]
        LITTLE_ENDIAN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BIG_ENDIAN")]
        BIG_ENDIAN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MSB_LAST")]
        MSB_LAST = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MSB_FIRST")]
        MSB_FIRST = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AxisDescriptionsDeposit
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ABSOLUTE")]
        ABSOLUTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DIFFERENCE")]
        DIFFERENCE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FixAxisPar
    {
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Offset { get; set; }

        [Newtonsoft.Json.JsonProperty("shift", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Shift { get; set; }

        [Newtonsoft.Json.JsonProperty("numberapo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Numberapo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static FixAxisPar FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FixAxisPar>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FixAxisParDist
    {
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Offset { get; set; }

        [Newtonsoft.Json.JsonProperty("shift", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Shift { get; set; }

        [Newtonsoft.Json.JsonProperty("numberapo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Numberapo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static FixAxisParDist FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FixAxisParDist>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FixAxisParList
    {
        [Newtonsoft.Json.JsonProperty("axisPtsValues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double> AxisPtsValues { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static FixAxisParList FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FixAxisParList>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AxisDescriptionsMonotony
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MON_DECREASE")]
        MON_DECREASE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MON_INCREASE")]
        MON_INCREASE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"STRICT_DECREASE")]
        STRICT_DECREASE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"STRICT_INCREASE")]
        STRICT_INCREASE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MONOTONOUS")]
        MONOTONOUS = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"STRICT_MON")]
        STRICT_MON = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_MON")]
        NOT_MON = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CalibrationHandle
    {
        [Newtonsoft.Json.JsonProperty("handles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Handles { get; set; }

        [Newtonsoft.Json.JsonProperty("calibrationText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CalibrationText { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static CalibrationHandle FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CalibrationHandle>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MemoryLayoutsPrgType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PRG_CODE")]
        PRG_CODE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PRG_DATA")]
        PRG_DATA = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PRG_RESERVED")]
        PRG_RESERVED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MemorySegmentsPrgType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CALIBRATION_VARIABLES")]
        CALIBRATION_VARIABLES = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CODE")]
        CODE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DATA")]
        DATA = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EXCLUDE_FROM_FLASH")]
        EXCLUDE_FROM_FLASH = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OFFLINE_DATA")]
        OFFLINE_DATA = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RESERVED")]
        RESERVED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SERAM")]
        SERAM = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"VARIABLES")]
        VARIABLES = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MemorySegmentsMemoryType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"EEPROM")]
        EEPROM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EPROM")]
        EPROM = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FLASH")]
        FLASH = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RAM")]
        RAM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ROM")]
        ROM = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"REGISTER")]
        REGISTER = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_IN_ECU")]
        NOT_IN_ECU = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MemorySegmentsAttribute
    {
        [System.Runtime.Serialization.EnumMember(Value = @"INTERN")]
        INTERN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EXTERN")]
        EXTERN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AxisPtsXDatatype
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UBYTE")]
        UBYTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SBYTE")]
        SBYTE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UWORD")]
        UWORD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SWORD")]
        SWORD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ULONG")]
        ULONG = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SLONG")]
        SLONG = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"A_UINT64")]
        A_UINT64 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"A_INT64")]
        A_INT64 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT32_IEEE")]
        FLOAT32_IEEE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT64_IEEE")]
        FLOAT64_IEEE = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AxisPtsXIndexorder
    {
        [System.Runtime.Serialization.EnumMember(Value = @"INDEX_INCR")]
        INDEX_INCR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INDEX_DECR")]
        INDEX_DECR = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AxisPtsXAddressing
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PBYTE")]
        PBYTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PWORD")]
        PWORD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PLONG")]
        PLONG = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DIRECT")]
        DIRECT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AxisRescaleXDatatype
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UBYTE")]
        UBYTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SBYTE")]
        SBYTE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UWORD")]
        UWORD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SWORD")]
        SWORD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ULONG")]
        ULONG = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SLONG")]
        SLONG = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"A_UINT64")]
        A_UINT64 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"A_INT64")]
        A_INT64 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT32_IEEE")]
        FLOAT32_IEEE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT64_IEEE")]
        FLOAT64_IEEE = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AxisRescaleXIndexorder
    {
        [System.Runtime.Serialization.EnumMember(Value = @"INDEX_INCR")]
        INDEX_INCR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INDEX_DECR")]
        INDEX_DECR = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AxisRescaleXAddressing
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PBYTE")]
        PBYTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PWORD")]
        PWORD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PLONG")]
        PLONG = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DIRECT")]
        DIRECT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DistOpXDataType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UBYTE")]
        UBYTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SBYTE")]
        SBYTE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UWORD")]
        UWORD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SWORD")]
        SWORD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ULONG")]
        ULONG = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SLONG")]
        SLONG = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"A_UINT64")]
        A_UINT64 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"A_INT64")]
        A_INT64 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT32_IEEE")]
        FLOAT32_IEEE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT64_IEEE")]
        FLOAT64_IEEE = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum FunctionValuesDataType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UBYTE")]
        UBYTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SBYTE")]
        SBYTE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UWORD")]
        UWORD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SWORD")]
        SWORD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ULONG")]
        ULONG = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SLONG")]
        SLONG = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"A_UINT64")]
        A_UINT64 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"A_INT64")]
        A_INT64 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT32_IEEE")]
        FLOAT32_IEEE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT64_IEEE")]
        FLOAT64_IEEE = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum FunctionValuesIndexMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ALTERNATE_CURVES")]
        ALTERNATE_CURVES = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ALTERNATE_WITH_X")]
        ALTERNATE_WITH_X = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ALTERNATE_WITH_Y")]
        ALTERNATE_WITH_Y = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"COLUMN_DIR")]
        COLUMN_DIR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ROW_DIR")]
        ROW_DIR = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum FunctionValuesAddressType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PBYTE")]
        PBYTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PWORD")]
        PWORD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PLONG")]
        PLONG = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DIRECT")]
        DIRECT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum IdentificationDataType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UBYTE")]
        UBYTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SBYTE")]
        SBYTE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UWORD")]
        UWORD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SWORD")]
        SWORD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ULONG")]
        ULONG = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SLONG")]
        SLONG = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"A_UINT64")]
        A_UINT64 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"A_INT64")]
        A_INT64 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT32_IEEE")]
        FLOAT32_IEEE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT64_IEEE")]
        FLOAT64_IEEE = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum NoAxisPtsXDataType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UBYTE")]
        UBYTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SBYTE")]
        SBYTE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UWORD")]
        UWORD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SWORD")]
        SWORD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ULONG")]
        ULONG = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SLONG")]
        SLONG = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"A_UINT64")]
        A_UINT64 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"A_INT64")]
        A_INT64 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT32_IEEE")]
        FLOAT32_IEEE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT64_IEEE")]
        FLOAT64_IEEE = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum NoRescaleXDataType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UBYTE")]
        UBYTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SBYTE")]
        SBYTE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UWORD")]
        UWORD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SWORD")]
        SWORD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ULONG")]
        ULONG = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SLONG")]
        SLONG = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"A_UINT64")]
        A_UINT64 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"A_INT64")]
        A_INT64 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT32_IEEE")]
        FLOAT32_IEEE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT64_IEEE")]
        FLOAT64_IEEE = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OffsetXDataType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UBYTE")]
        UBYTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SBYTE")]
        SBYTE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UWORD")]
        UWORD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SWORD")]
        SWORD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ULONG")]
        ULONG = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SLONG")]
        SLONG = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"A_UINT64")]
        A_UINT64 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"A_INT64")]
        A_INT64 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT32_IEEE")]
        FLOAT32_IEEE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT64_IEEE")]
        FLOAT64_IEEE = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ReservedDataSize
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BYTE")]
        BYTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WORD")]
        WORD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LONG")]
        LONG = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum RipAddressWDataType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UBYTE")]
        UBYTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SBYTE")]
        SBYTE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UWORD")]
        UWORD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SWORD")]
        SWORD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ULONG")]
        ULONG = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SLONG")]
        SLONG = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"A_UINT64")]
        A_UINT64 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"A_INT64")]
        A_INT64 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT32_IEEE")]
        FLOAT32_IEEE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT64_IEEE")]
        FLOAT64_IEEE = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SrcAddressXDataType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UBYTE")]
        UBYTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SBYTE")]
        SBYTE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UWORD")]
        UWORD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SWORD")]
        SWORD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ULONG")]
        ULONG = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SLONG")]
        SLONG = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"A_UINT64")]
        A_UINT64 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"A_INT64")]
        A_INT64 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT32_IEEE")]
        FLOAT32_IEEE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT64_IEEE")]
        FLOAT64_IEEE = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ShiftOpXDataType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UBYTE")]
        UBYTE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SBYTE")]
        SBYTE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UWORD")]
        UWORD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SWORD")]
        SWORD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ULONG")]
        ULONG = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SLONG")]
        SLONG = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"A_UINT64")]
        A_UINT64 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"A_INT64")]
        A_INT64 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT32_IEEE")]
        FLOAT32_IEEE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT64_IEEE")]
        FLOAT64_IEEE = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Tuples
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());
        }

        public static Tuples FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tuples>(data, new Newtonsoft.Json.JsonSerializerSettings());
        }

    }
}